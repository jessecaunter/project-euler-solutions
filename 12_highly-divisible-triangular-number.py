# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1, 3
# 6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# -----------------------------------------------------------------------------------

import math

# We need two counters - one for the iteration, one for the value
# We also need a variable to assign the value of our solution once it's found
i = 1
number = 0
solution = 0

# Instead of looping through every number up to the function parameter,
# we can calculate its square root, then loop through each number less than or equal
# to that, appending it to the factors list if the parameter divides evenly into it.
# From there, we can just iterate through our factors list in reverse order making
# sure we don't add the same number twice if it's the square root.
def count_factors(num):
    sqrt = int(math.sqrt(num))
    factors = []
    for i in range(1, sqrt + 1):
        if num % i == 0:
            factors.append(i)
    for i in reversed(factors):
        if num / i != i:
            factors.append(num // i)
    return len(factors)

while solution == 0:
    number += i
    print(f'{i}: {number} has {count_factors(number)} factors')
    if count_factors(number) > 500:
        solution = number
        break
    i += 1

print(f'SOLUTION: {solution}')